# frozen_string_literal: true

require 'octokit'

default_platform(:ios)

# -- Global constants

APPLICATION_XCCONFIG_FILEPATH = 'Demo/Xcode/Shared/Targets/Application.xcconfig'

# -- Platform-specific constants

PLATFORMS = {
  ios: 'iOS',
  tvos: 'tvOS'
}.freeze

TESTFLIGHT_PLATFORMS = {
  ios: 'ios',
  tvos: 'appletvos'
}.freeze

DEVICES = {
  ios: 'iPhone 13',
  tvos: 'Apple TV'
}.freeze

ICON_GLOBS = {
  ios: '/Demo/Resources/Assets.xcassets/AppIcon.appiconset/*.png',
  tvos: \
    '/Demo/Resources/Assets.xcassets/App Icon & Top Shelf Image.brandassets/*/Back.imagestacklayer' \
    '/Content.imageset/*.png'
}.freeze

SHIELD_SCALES = {
  ios: '0.8',
  tvos: '0.4'
}.freeze

# -- Configuration-specific constants

CONFIGURATIONS = {
  nightly: 'Nightly',
  release: 'Release'
}.freeze

APP_IDENTIFIERS = {
  nightly: 'ch.srgssr.Pillarbox-demo.nightly',
  release: 'ch.srgssr.Pillarbox-demo'
}.freeze

# -- Helpers

def valid_float?(string)
  true if Float string
rescue StandardError
  false
end
# -- External configuration

def github_api_token
  ENV.fetch('GITHUB_API_TOKEN', nil)
end

def github_repository
  ENV.fetch('GITHUB_REPO_SLUG', nil)
end

def github_pull_request_id
  id = ENV.fetch('GITHUB_PULL_REQUEST_ID', nil)
  id if valid_float?(id)
end

def key_filepath
  File.expand_path('../Configuration/AppStoreConnect_API_Key.p8')
end

# -- xcconfig management

def xcconfig_marketing_version
  get_xcconfig_value(
    path: APPLICATION_XCCONFIG_FILEPATH,
    name: 'MARKETING_VERSION'
  )
end

def xcconfig_build_number
  get_xcconfig_value(
    path: APPLICATION_XCCONFIG_FILEPATH,
    name: 'CURRENT_PROJECT_VERSION'
  )
end

# -- fastlane helpers

def ensure_configuration_availability
  return if File.directory?('../Configuration')

  UI.user_error!('Use of this lane requires private configuration details to be available.')
end

# Should be called before any operation requiring authentication (expires after 120 seconds)
#
# TODO: If build_app is updated to support a JSON API key path for automatic signing in the future (instead
#       of manually supplied xargs) we could remove this method and have the JSON passed to all fastlane actions
#       instead. This would be cleaner but currently we still need to duplicate the key as a .p8 file for build_app,
#       so there is no advantage in adopting the JSON API approach at the moment. Also see:
#         https://docs.fastlane.tools/app-store-connect-api/#using-fastlane-api-key-hash-option
#         https://github.com/fastlane/fastlane/discussions/19973
def login_to_app_store_connect
  app_store_connect_api_key(
    key_id: ENV.fetch('KEY_ID'),
    issuer_id: ENV.fetch('KEY_ISSUER_ID'),
    key_filepath: key_filepath
  )
end

def bump_testflight_build_number(platform_id, configuration_id)
  login_to_app_store_connect
  build_number = latest_testflight_build_number(
    app_identifier: APP_IDENTIFIERS[configuration_id],
    platform: TESTFLIGHT_PLATFORMS[platform_id]
  ) + 1
  update_xcconfig_value(
    path: APPLICATION_XCCONFIG_FILEPATH,
    name: 'CURRENT_PROJECT_VERSION',
    value: build_number.to_s
  )
  build_number
end

def build_and_sign_app(platform_id, configuration_id)
  build_app(
    project: 'Demo/Pillarbox-demo.xcodeproj',
    configuration: CONFIGURATIONS[configuration_id],
    scheme: 'Pillarbox-demo',
    destination: "generic/platform=#{PLATFORMS[platform_id]}",
    export_team_id: ENV.fetch('TEAM_ID'),
    output_directory: 'Binaries',
    xcargs: "-authenticationKeyIssuerID #{ENV.fetch('KEY_ISSUER_ID')} -authenticationKeyID #{ENV.fetch('KEY_ID')} " \
            "-authenticationKeyPath #{key_filepath} -allowProvisioningUpdates"
  )
end

def add_version_badge(platform_id, label, message, color)
  add_badge(
    no_badge: true,
    shield: "#{label}-#{message}-#{color}",
    shield_scale: SHIELD_SCALES[platform_id],
    shield_gravity: 'South',
    glob: ICON_GLOBS[platform_id]
  )
end

def changelog
  # Same formatters as git-log: https://git-scm.com/docs/pretty-formats
  changelog_from_git_commits(
    commits_count: 10,
    pretty: '- %s'
  )
end

def upload_app_to_testflight
  # FIXME: Temporary workaround for upload with Xcode 14, see https://github.com/fastlane/fastlane/issues/20371
  xcversion(version: '~> 13')
  login_to_app_store_connect
  upload_to_testflight
  xcversion(version: '~> 14')
end

# Requires `Beta App Information` and `Beta App Review Information` to have been properly filled once in TestFlight
def distribute_app_to_testers(platform_id, configuration_id, build_number)
  # FIXME: Temporary workaround for upload with Xcode 14, see https://github.com/fastlane/fastlane/issues/20371
  xcversion(version: '~> 13')
  login_to_app_store_connect
  upload_to_testflight(
    app_identifier: APP_IDENTIFIERS[configuration_id],
    distribute_only: true,
    app_platform: TESTFLIGHT_PLATFORMS[platform_id],
    build_number: build_number.to_s,
    distribute_external: true,
    changelog: changelog,
    groups: ENV.fetch('TESTFLIGHT_GROUPS'),
    notify_external_testers: true,
    demo_account_required: false
  )
  xcversion(version: '~> 14')
rescue StandardError => e
  raise e unless e.message.include?('Another build is in review')

  UI.important('TestFlight external delivery was skipped because a build is already in review')
end

def archive_demo(platform_id)
  ensure_configuration_availability
  build_and_sign_app(platform_id, :nightly)
  build_and_sign_app(platform_id, :release)
end

def deliver_demo_nightly(platform_id)
  ensure_configuration_availability
  build_number = bump_testflight_build_number(platform_id, :nightly)
  add_version_badge(platform_id, xcconfig_marketing_version, build_number, 'orange')
  build_and_sign_app(platform_id, :nightly)
  reset_git_repo(skip_clean: true)
  upload_app_to_testflight
  distribute_app_to_testers(platform_id, :nightly, build_number)
  update_github_nightly_availability(platform_id, "#{xcconfig_marketing_version} (#{build_number})")
end

def deliver_demo_release(platform_id)
  ensure_configuration_availability
  add_version_badge(platform_id, 'v.', xcconfig_marketing_version, 'blue')
  build_and_sign_app(platform_id, :release)
  reset_git_repo(skip_clean: true)
  upload_app_to_testflight
  distribute_app_to_testers(platform_id, :release, xcconfig_build_number)
end

def run_package_tests(platform_id, scheme_name)
  run_tests(
    scheme: scheme_name,
    device: DEVICES[platform_id],
    package_path: '.',
    result_bundle: true,
    clean: true,
    fail_build: false
  )
  trainer(
    path: 'fastlane/test_output',
    output_remove_retry_attempts: true,
    fail_build: false
  )
end

def run_all_tests(platform_id)
  run_package_tests(platform_id, 'Appearance')
  run_package_tests(platform_id, 'CoreBusiness')
  run_package_tests(platform_id, 'Diagnostics')
  run_package_tests(platform_id, 'Player')
  run_package_tests(platform_id, 'UserInterface')
end

# -- GitHub comment builders

# Insert data into a comment so that it can be retrieved when updating the comment
def build_github_comment_body(identifier, text, data)
  <<~MESSAGE
    <!--PB_#{identifier}_BEGIN
    #{data.map { |key, value| "#{key}: #{value}" }.join("\n")}
    PB_END-->
    #{text}
  MESSAGE
end

# Extract data stored as a comment
def parse_github_comment_data(comment)
  regex = comment.body.match(/<!--PB_(.*)_BEGIN\n(.*)\nPB_END-->/m)
  {
    id: regex[1],
    data: regex[2].split("\n").to_h { |component| component.split(': ') }
  }
rescue StandardError
  nil
end

def comment_has_identifier(comment, identifier)
  data = parse_github_comment_data(comment)
  return if data.nil?

  data[:id] == identifier
end

## -- GitHub issue comment management (can be used for PR comments as well)
##      See https://docs.github.com/en/rest/issues/comments

def find_issue_comment_with_identifier(client, identifier, issue_id)
  comments = client.issue_comments(github_repository, issue_id)
  comments.find { |comment| comment_has_identifier(comment, identifier) }
end

def add_github_issue_comment(client, identifier, issue_id, data, text_builder)
  text = text_builder.call(data)
  body = build_github_comment_body(identifier, text, data)
  client.add_comment(github_repository, issue_id, body)
end

def update_github_issue_comment(client, identifier, comment, data, text_builder)
  original_data = parse_github_comment_data(comment)[:data]
  merged_data = original_data.merge(data)
  text = text_builder.call(merged_data)
  body = build_github_comment_body(identifier, text, merged_data)
  client.update_comment(github_repository, comment.id, body)
end

def post_github_issue_comment(identifier, issue_id, data, &text_builder)
  client = Octokit::Client.new(access_token: github_api_token)
  client.auto_paginate = true
  comment = find_issue_comment_with_identifier(client, identifier, issue_id)
  if comment.nil?
    add_github_issue_comment(client, identifier, issue_id, data, text_builder)
  else
    update_github_issue_comment(client, identifier, comment, data, text_builder)
  end
end

## -- GitHub integration helpers

def availability_data(platform_id, version)
  case platform_id
  when :tvos
    { 'tvos' => version }
  else
    { 'ios' => version }
  end
end

def update_github_nightly_availability(platform_id, version)
  if github_api_token.nil? || github_repository.nil? || github_pull_request_id.nil?
    UI.message \
      'Not a pull request or missing GitHub environment information. Nightly availability will not be posted to GitHub.'
    return
  end

  post_github_issue_comment('nightly', github_pull_request_id, availability_data(platform_id, version)) do |data|
    ios = data['ios'] ||= '-'
    tvos = data['tvos'] ||= '-'

    <<~BODY
      # ðŸŒ™ Available in TestFlight nightlies

      The most recent state can be tested in the following builds:

      | Platform | Version |
      |:-- |:--:|
      | iOS | #{ios} |
      | tvOS | #{tvos} |
    BODY
  end
end

# -- Lanes

platform :ios do
  before_all do
    ensure_git_status_clean
    xcversion(version: '~> 14')
  end

  after_all do
    reset_git_repo
  end

  desc 'Archive the iOS demo app'
  lane :archive_demo_ios do
    archive_demo(:ios)
  end

  desc 'Archive the tvOS demo app'
  lane :archive_demo_tvos do
    archive_demo(:tvos)
  end

  desc 'Deliver an iOS demo app nightly build'
  lane :deliver_demo_nightly_ios do
    deliver_demo_nightly(:ios)
  end

  desc 'Deliver a tvOS demo app nightly build'
  lane :deliver_demo_nightly_tvos do
    deliver_demo_nightly(:tvos)
  end

  desc 'Deliver an iOS demo app release build'
  lane :deliver_demo_release_ios do
    deliver_demo_release(:ios)
  end

  desc 'Deliver a tvOS demo app release build'
  lane :deliver_demo_release_tvos do
    deliver_demo_release(:tvos)
  end

  desc 'Build and run iOS unit tests'
  lane :test_ios do
    run_all_tests(:ios)
  end

  desc 'Build and run tvOS unit tests'
  lane :test_tvos do
    run_all_tests(:tvos)
  end

  desc 'Build documentation'
  lane :doc do
    sh('../Scripts/generate-documentation.sh')
  end
end
