# frozen_string_literal: true

default_platform(:ios)

platform :ios do
  def key_filepath
    File.expand_path('../Configuration/AppStoreConnect_API_Key.p8')
  end

  def application_xcconfig_filepath
    'Demo/Xcode/Shared/Targets/Application.xcconfig'
  end

  def login_to_app_store_connect
    app_store_connect_api_key(
      key_id: ENV['KEY_ID'],
      issuer_id: ENV['KEY_ISSUER_ID'],
      key_filepath: key_filepath
    )
  end

  before_all do
    ensure_git_status_clean
    xcversion(version: '~> 14')
  end

  desc 'Build and distribute the demo app'
  lane :demo do
    login_to_app_store_connect
    build_number = latest_testflight_build_number(
      app_identifier: ENV['APP_IDENTIFIER'],
      platform: ENV['TESTFLIGHT_PLATFORM']
    ) + 1
    update_xcconfig_value(
      path: application_xcconfig_filepath,
      name: 'CURRENT_PROJECT_VERSION',
      value: build_number.to_s
    )
    marketing_version = get_xcconfig_value(
      path: application_xcconfig_filepath,
      name: 'MARKETING_VERSION'
    )
    add_badge(
      no_badge: true,
      shield: "#{marketing_version}-#{build_number}-orange",
      shield_scale: '0.5',
      shield_gravity: 'South',
      shield_geometry: '+0+20%'
    )
    build_app(
      project: 'Demo/Pillarbox-demo.xcodeproj',
      configuration: ENV['CONFIGURATION'],
      scheme: 'Pillarbox-demo',
      destination: "generic/platform=#{ENV['PLATFORM']}",
      export_team_id: ENV['TEAM_ID'],
      output_directory: 'Binaries',
      xcargs: "-authenticationKeyIssuerID #{ENV['KEY_ISSUER_ID']} " \
              "-authenticationKeyID #{ENV['KEY_ID']} " \
              "-authenticationKeyPath #{key_filepath} " \
              '-allowProvisioningUpdates'
    )
    changelog_from_git_commits
    xcversion(version: '~> 13')
    upload_to_testflight
    xcversion(version: '~> 14')
  end

  desc 'Build and run unit tests'
  lane :tests do
    run_tests(scheme: 'Appearance', device: ENV['DEVICE'], package_path: '.', result_bundle: true)
    run_tests(scheme: 'CoreBusiness', device: ENV['DEVICE'], package_path: '.', result_bundle: true)
    run_tests(scheme: 'Diagnostics', device: ENV['DEVICE'], package_path: '.', result_bundle: true)
    run_tests(scheme: 'Player', device: ENV['DEVICE'], package_path: '.', result_bundle: true)
    run_tests(scheme: 'UserInterface', device: ENV['DEVICE'], package_path: '.', result_bundle: true)
  end
end
