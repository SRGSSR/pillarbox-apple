# frozen_string_literal: true

default_platform(:ios)

# -- Helpers

def app_identifier(configuration)
  case configuration
  when 'Nightly'
    'ch.srgssr.Pillarbox-demo.nightly'
  else
    'ch.srgssr.Pillarbox-demo'
  end
end

def key_filepath
  File.expand_path('../Configuration/AppStoreConnect_API_Key.p8')
end

def application_xcconfig_filepath
  'Demo/Xcode/Shared/Targets/Application.xcconfig'
end

def ensure_configuration_availability
  return if File.directory?('../Configuration')

  UI.user_error!('Use of this lane requires private configuration details to be available.')
end

# Should be called before any operation requiring authentication (expires after 120 seconds)
#
# TODO: If build_app is updated to support a JSON API key path for automatic signing in the future (instead
#       of manually supplied xargs) we could remove this method and have the JSON passed to all fastlane actions
#       instead. This would be cleaner but currently we still need to duplicate the key as a .p8 file for build_app,
#       so there is no advantage in adopting the JSON API approach at the moment. Also see:
#         https://docs.fastlane.tools/app-store-connect-api/#using-fastlane-api-key-hash-option
#         https://github.com/fastlane/fastlane/discussions/19973
def login_to_app_store_connect
  app_store_connect_api_key(
    key_id: ENV.fetch('KEY_ID'),
    issuer_id: ENV.fetch('KEY_ISSUER_ID'),
    key_filepath: key_filepath
  )
end

def xcconfig_marketing_version
  get_xcconfig_value(
    path: application_xcconfig_filepath,
    name: 'MARKETING_VERSION'
  )
end

def xcconfig_build_number
  get_xcconfig_value(
    path: application_xcconfig_filepath,
    name: 'CURRENT_PROJECT_VERSION'
  )
end

def bump_testflight_build_number(configuration)
  login_to_app_store_connect
  build_number = latest_testflight_build_number(
    app_identifier: app_identifier(configuration),
    platform: ENV.fetch('TESTFLIGHT_PLATFORM')
  ) + 1
  update_xcconfig_value(
    path: application_xcconfig_filepath,
    name: 'CURRENT_PROJECT_VERSION',
    value: build_number.to_s
  )
  build_number
end

def build_and_sign_app(configuration)
  build_app(
    project: 'Demo/Pillarbox-demo.xcodeproj',
    configuration: configuration,
    scheme: 'Pillarbox-demo',
    destination: "generic/platform=#{ENV.fetch('PLATFORM')}",
    export_team_id: ENV.fetch('TEAM_ID'),
    output_directory: 'Binaries',
    xcargs: "-authenticationKeyIssuerID #{ENV.fetch('KEY_ISSUER_ID')} -authenticationKeyID #{ENV.fetch('KEY_ID')} " \
            "-authenticationKeyPath #{key_filepath} -allowProvisioningUpdates"
  )
end

def add_version_badge(label, message, color)
  add_badge(
    no_badge: true,
    shield: "#{label}-#{message}-#{color}",
    shield_scale: ENV.fetch('SHIELD_SCALE'),
    shield_gravity: 'South',
    glob: ENV.fetch('ICON_GLOB')
  )
end

def changelog
  # Same formatters as git-log: https://git-scm.com/docs/pretty-formats
  changelog_from_git_commits(
    commits_count: 10,
    pretty: '- %s'
  )
end

def upload_app_to_testflight
  # FIXME: Temporary workaround for upload with Xcode 14, see https://github.com/fastlane/fastlane/issues/20371
  xcversion(version: '~> 13')
  login_to_app_store_connect
  upload_to_testflight
  xcversion(version: '~> 14')
end

# Requires `Beta App Information` and `Beta App Review Information` to have been properly filled once in TestFlight
def distribute_app_to_testers(configuration, build_number)
  # FIXME: Temporary workaround for upload with Xcode 14, see https://github.com/fastlane/fastlane/issues/20371
  xcversion(version: '~> 13')
  login_to_app_store_connect
  upload_to_testflight(
    app_identifier: app_identifier(configuration),
    distribute_only: true,
    app_platform: ENV.fetch('TESTFLIGHT_PLATFORM'),
    build_number: build_number.to_s,
    distribute_external: true,
    changelog: changelog,
    groups: ENV.fetch('TESTFLIGHT_GROUPS'),
    notify_external_testers: true,
    demo_account_required: false
  )
  xcversion(version: '~> 14')
rescue StandardError => e
  raise e unless e.message.include?('Another build is in review')

  UI.important('TestFlight external delivery was skipped because a build is already in review')
end

def run_package_tests(scheme_name)
  run_tests(
    scheme: scheme_name,
    device: ENV.fetch('DEVICE'),
    package_path: '.',
    result_bundle: true,
    clean: true,
    fail_build: false
  )
  trainer(
    path: 'fastlane/test_output',
    output_remove_retry_attempts: true,
    fail_build: false
  )
end

# -- Lanes

platform :ios do
  before_all do
    ensure_git_status_clean
    xcversion(version: '~> 14')
  end

  after_all do
    reset_git_repo
  end

  desc 'Archive the demo app'
  lane :archive_demo do
    ensure_configuration_availability
    build_and_sign_app('Nightly')
    build_and_sign_app('Release')
  end

  desc 'Deliver a demo app nightly build'
  lane :deliver_demo_nightly do
    ensure_configuration_availability
    build_number = bump_testflight_build_number('Nightly')
    add_version_badge(xcconfig_marketing_version, build_number, 'orange')
    build_and_sign_app('Nightly')
    reset_git_repo(skip_clean: true)
    upload_app_to_testflight
    distribute_app_to_testers('Nightly', build_number)
  end

  desc 'Deliver a demo app release build'
  lane :deliver_demo_release do
    ensure_configuration_availability
    add_version_badge('v.', xcconfig_marketing_version, 'blue')
    build_and_sign_app('Release')
    reset_git_repo(skip_clean: true)
    upload_app_to_testflight
    distribute_app_to_testers('Release', xcconfig_build_number)
  end

  desc 'Build and run unit testse'
  lane :test do
    run_package_tests('Appearance')
    run_package_tests('CoreBusiness')
    run_package_tests('Diagnostics')
    run_package_tests('Player')
    run_package_tests('UserInterface')
  end

  desc 'Build documentation'
  lane :doc do
    sh('../Scripts/generate-documentation.sh')
  end
end
