@Tutorial(time: 15) {
    @Intro(title: "Supporting pinch-to-zoom") {
        Add a pinch gesture to let users zoom in and out of videos.

        Zooming in allows users to have a more immersive video experience. This tutorial explores how to enable pinch-to-zoom functionality, making it available only when the video player is displayed in full-screen mode.

        @Image(source: supporting-pinch-to-zoom-intro, alt: "Illustration showing pinch gestures with directional arrows.")
    }
    
    @Section(title: "Add a pinch gesture for video zooming") {
        @ContentAndMedia {
            Begin with a basic video player interface. Implement a pinch gesture to toggle the player's content gravity, allowing users to zoom in and out.
        }
        
        @Steps {
            @Step {
                Replace your existing `ContentView` code with the provided implementation.

                This implementation starts with a simple video playback interface.

                @Code(name: "ContentView.swift", file: supporting-pinch-to-zoom-1-1.swift) {
                    @Image(source: supporting-pinch-to-zoom-1-1, alt: "A screenshot of an iPhone playing a video.")
                }
            }
            
            @Step {
                Add an `AVLayerVideoGravity` view state to store the current video gravity, initializing it to `.resizeAspect`. Pass this state to the `VideoView` using the appropriate modifier.

                @Code(name: "ContentView.swift", file: supporting-pinch-to-zoom-1-2.swift)
            }
            
            @Step {
                Implement a `MagnificationGesture` to switch the gravity between zoomed-in and zoomed-out states based on the pinch direction.

                Run the project to verify that the pinch-to-zoom gesture is functioning as expected.

                @Code(name: "ContentView.swift", file: supporting-pinch-to-zoom-1-3.swift) {
                    @Image(source: supporting-pinch-to-zoom-1-3, alt: "A screenshot of an iPhone playing a video.")
                }
            }
        }
    }
        
    @Section(title: "Restrict pinch-to-zoom to maximized layouts") {
        @ContentAndMedia {
            Ensure the pinch gesture is available only when the video player fills the entire screen context.
        }
        
        @Steps {
            @Step {
                Add padding around the `VideoView`, so it no longer occupies the full parent context.

                Run the project to confirm that the zoom gesture still works.

                @Code(name: "ContentView.swift", file: supporting-pinch-to-zoom-2-1.swift, previousFile: supporting-pinch-to-zoom-1-3.swift)
            }
            
            @Step {
                Apply the `readLayout(into:)` modifier to the `VideoView` to gather layout information, storing it in a `LayoutInfo` state.

                @Code(name: "ContentView.swift", file: supporting-pinch-to-zoom-2-2.swift)
            }
            
            @Step {
                Use the layout information to set the gesture mask to `.subviews` when the `VideoView` does not occupy its full context.

                Run the project to confirm that the zoom gesture is now disabled in non-maximized layouts. Remove the padding and test again to ensure the gesture works as expected when the player is in full-screen mode.

                @Code(name: "ContentView.swift", file: supporting-pinch-to-zoom-2-3.swift)
            }
        }
    }
}
