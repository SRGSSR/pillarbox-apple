@Tutorial(time: 15) {
    @Intro(title: "Creating a basic user interface") {
        Learn how to create a custom player user interface for your app, incorporating playback controls that dynamically adjust based on the current playback state.

        @Image(source: creating-basic-user-interface-intro, alt: "An image depicting a playback button.")
    }

    @Section(title: "Play and pause") {
        @ContentAndMedia {
            Build a basic video playback featuring displaying a play/pause button.
        }

        @Steps {
            @Step {
                Create a `ContentView` to host your video content.

                @Code(name: "ContentView.swift", file: creating-basic-user-interface-1-1.swift)
            }

            @Step {
                Add a `Player` to your `ContentView` and store it as a `@StateObject` associated with the view. Provide the player with a `PlayerItem` containing a URL of your choice.

                @Code(name: "ContentView.swift", file: creating-basic-user-interface-1-2.swift)
            }

            @Step {
                Add a `VideoView` to your `ContentView` body to render the player content on the screen.

                @Code(name: "ContentView.swift", file: creating-basic-user-interface-1-3.swift) {
                    @Image(source: creating-basic-user-interface-1-3, alt: "A screenshot of an iPhone UI displaying video content.")
                }
            }

            @Step {
                Add a play/pause button to control the player. Use `togglePlayPause()` as the action for this button.

                @Code(name: "ContentView.swift", file: creating-basic-user-interface-1-4.swift) {
                    @Image(source: creating-basic-user-interface-1-4, alt: "A screenshot of an iPhone UI with a play/pause button.")
                }
            }

            @Step {
                Use the player state to dynamically update the button's icon.

                @Code(name: "ContentView.swift", file: creating-basic-user-interface-1-5.swift) {
                    @Image(source: creating-basic-user-interface-1-5, alt: "A screenshot of an iPhone UI showing dynamic button states.")
                }
            }
        }
    }

    @Section(title: "Backward and Forward Seek") {
        @ContentAndMedia {
            Enhance the user interface with skip buttons for seeking backward and forward in the media by fixed intervals.
        }

        @Steps {
            @Step {
                Add a button for skipping backward. Use `skipBackward()` as the action.

                The button icon matches the default backward skip interval (+10 seconds).

                @Code(name: "ContentView.swift", file: creating-basic-user-interface-2-1.swift, previousFile: creating-basic-user-interface-1-5.swift) {
                    @Image(source: creating-basic-user-interface-2-1, alt: "A screenshot of an iPhone UI with a +10 seconds button.")
                }
            }

            @Step {
                Add a button for skipping forward. Use `skipForward()` as the action.

                The button icon matches the default forward skip interval (-10 seconds).

                @Code(name: "ContentView.swift", file: creating-basic-user-interface-2-2.swift) {
                    @Image(source: creating-basic-user-interface-2-2, alt: "A screenshot of an iPhone UI with a -10 seconds button.")
                }
            }

            @Step {
                Customize skip intervals by adjusting the `PlayerConfiguration`.
                
                Update button icons to match the skip intervals.

                @Code(name: "ContentView.swift", file: creating-basic-user-interface-2-3.swift) {
                    @Image(source: creating-basic-user-interface-2-3, alt: "A screenshot of an iPhone UI with updated skip intervals.")
                }
            }
        }
    }
}
